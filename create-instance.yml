- name: Create instance
  hosts: localhost
  gather_facts: false
  connection: local
  vars:
    gcp_project: round-plating-286915
    gcp_cred_kind: serviceaccount
    gcp_cred_file: /Users/michaelschmidt/git/kiratech-techchallenge/round-plating-286915-49944854916b.json
    zone: "us-central1-b"
    region: "us-central1"
    image: "projects/ubuntu-os-cloud/global/images/family/ubuntu-1804-lts"
  tasks:
    - name: create a disk
      gcp_compute_disk:
        name: 'disk-instance'
        size_gb: 10
        source_image: "{{ image }}"
        zone: "{{ zone }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes:
          - https://www.googleapis.com/auth/compute
        state: present
      register: disk
    - name: create network
      gcp_compute_network:
        name: 'default'
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes:
          - https://www.googleapis.com/auth/compute
        state: present
      register: network
    - name: create a address
      gcp_compute_address:
        name: 'address-instance'
        region: "{{ region }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes:
          - https://www.googleapis.com/auth/compute
        state: present
      register: address
    - name: open firewall
      gcp_compute_firewall:
        name: docker-port
        allowed:
        - ip_protocol: tcp
          ports:
          - '2375'
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        state: present
    - name: create instance
      gcp_compute_instance:
        state: present
        name: test-vm-a,test-vm-b
        machine_type: f1-micro
        disks:
          - auto_delete: true
            boot: true
            source: "{{ disk }}"
        network_interfaces:
          - network: "{{ network }}"
            access_configs:
              - name: 'External NAT'
                nat_ip: "{{ address }}"
                type: 'ONE_TO_ONE_NAT'
        zone: "{{ zone }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        scopes:
          - https://www.googleapis.com/auth/compute
      register: instance
    - name: Wait for SSH to come up
      wait_for: host={{ address.address }} port=22 delay=10 timeout=60
    - name: Add host to groupname
      add_host: hostname={{ address.address }} groupname=new_instances
#    - name: Give them the key
      #connection: ssh
#      authorized_key:
#        user: michaelschmidt
#        state: present
#        key: "{{ lookup('file', '/Users/michaelschmidt/git/kiratech-techchallenge/id_rsa.pub') }}"

- name: install software
  hosts: new_instances
  tags: 
    - configuration
  become: true
  connection: ssh
  environment:
    DOCKER_HOST: tcp://0.0.0.0:2375
  tasks:
    - name: install packages required by docker
      become: true
      apt:
        update_cache: yes
        state: latest
        name:
        - apt-transport-https
        - ca-certificates
        - curl
        - gpg-agent
        - software-properties-common

    - name: add docker GPG key
      become: true
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: add docker apt repo
      become: true
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: install python dependencies
      become: true
      apt:
        update_cache: yes
        state: latest
        name: python3-pip

    - name: install 'Docker SDK for Python'
      #become: true               <--- DO NOT DO THIS!!!
      pip:
        name: docker

    - name: install docker
      become: true
      apt:
        update_cache: yes
        state: latest
        name:
        - docker-ce
        - docker-ce-cli
        - containerd.io

    - name: add daemon.json config file
      copy:
        src: daemon.json
        dest: /etc/docker/daemon.json
        follow: yes
    - name: Create directory 
      file:
        path: /etc/systemd/system/docker.service.d
        state: directory
        mode: '0755'
    - name: add docker.conf config file
      copy:
        src: docker.conf
        dest: /etc/systemd/system/docker.service.d/docker.conf
        follow: yes

    - name: read config
      systemd:
        daemon_reload: yes
    - service: name=docker state=restarted


# Wanted to use this but it didnt work
#    - name: change docker host 
#      docker_config:
#        name: docker_host
#        data: your ad here
#        force: True
#        docker_host: tcp://0.0.0.0:2375
#        state: present
#        tls: True
